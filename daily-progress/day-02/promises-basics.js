// Promises —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ - –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã
console.log('=== PROMISES –û–°–ù–û–í–´ ===');

// ============================================
// 1. –ß–¢–û –¢–ê–ö–û–ï PROMISE?
// ============================================

console.log('\n1. –ß—Ç–æ —Ç–∞–∫–æ–µ Promise?');
console.log('Promise - —ç—Ç–æ "–æ–±–µ—â–∞–Ω–∏–µ" –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—É–¥—É—â–µ–º');

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π Promise
const simplePromise = new Promise((resolve, reject) => {
    console.log('Promise —Å–æ–∑–¥–∞–Ω! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    
    // –ß–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É "–≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–µ—â–∞–Ω–∏–µ"
    setTimeout(() => {
        resolve('–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω');
    }, 1000);
});

console.log('Promise —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—â–µ –Ω–µ—Ç');

// ============================================
// 2. –ö–ê–ö –ü–û–õ–£–ß–ò–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢?
// ============================================

console.log('\n2. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?');

// –°–ø–æ—Å–æ–± 1: .then()
simplePromise.then((result) => {
    console.log('–ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
});

// ============================================
// 3. –°–û–°–¢–û–Ø–ù–ò–Ø PROMISE
// ============================================

console.log('\n3. –°–æ—Å—Ç–æ—è–Ω–∏—è Promise:');

// Pending (–æ–∂–∏–¥–∞–Ω–∏–µ)
const pendingPromise = new Promise((resolve) => {
    setTimeout(() => resolve('–†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã'), 2000);
});
console.log('–°–æ–∑–¥–∞–ª–∏ Promise - —Å–µ–π—á–∞—Å –æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ PENDING');

// Fulfilled (–≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ)
const fulfilledPromise = Promise.resolve('–°—Ä–∞–∑—É —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
fulfilledPromise.then(result => {
    console.log('FULFILLED:', result);
});

// Rejected (–æ—Ç–∫–ª–æ–Ω–µ–Ω —Å –æ—à–∏–±–∫–æ–π)
const rejectedPromise = Promise.reject(new Error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'));
rejectedPromise.catch(error => {
    console.log('REJECTED:', error.message);
});

// ============================================
// 4. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–ú–ï–† - –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
// ============================================

console.log('\n4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä:');

function loadUserData(userId) {
    return new Promise((resolve, reject) => {
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
        
        setTimeout(() => {
            if (userId > 0) {
                resolve({
                    id: userId,
                    name: 'John Doe',
                    email: 'john@example.com'
                });
            } else {
                reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'));
            }
        }, 1500);
    });
}

// –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
loadUserData(123)
    .then(user => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', user);
    })
    .catch(error => {
        console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
    });

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å –æ—à–∏–±–∫–æ–π
loadUserData(-1)
    .then(user => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', user);
    })
    .catch(error => {
        console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
    });

// ============================================
// 5. –¶–ï–ü–û–ß–ö–ò PROMISES
// ============================================

console.log('\n5. –¶–µ–ø–æ—á–∫–∏ Promises:');

function step1() {
    return Promise.resolve('–®–∞–≥ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω');
}

function step2(previousResult) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve(previousResult + ' ‚Üí –®–∞–≥ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω');
        }, 500);
    });
}

function step3(previousResult) {
    return Promise.resolve(previousResult + ' ‚Üí –®–∞–≥ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω');
}

// –¶–µ–ø–æ—á–∫–∞
step1()
    .then(result1 => {
        console.log(result1);
        return step2(result1);
    })
    .then(result2 => {
        console.log(result2);
        return step3(result2);
    })
    .then(finalResult => {
        console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', finalResult);
    });

// ============================================
// 6. ASYNC/AWAIT - –°–û–í–†–ï–ú–ï–ù–ù–´–ô –°–ü–û–°–û–ë
// ============================================

console.log('\n6. Async/Await - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±:');

async function modernExample() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä...');
        
        const user = await loadUserData(456);
        console.log('Async/await - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
        
        const step1Result = await step1();
        const step2Result = await step2(step1Result);
        const step3Result = await step3(step2Result);
        
        console.log('Async/await - —Ñ–∏–Ω–∞–ª:', step3Result);
        
    } catch (error) {
        console.log('Async/await - –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –ø—Ä–∏–º–µ—Ä–∞–º
setTimeout(() => {
    modernExample();
}, 3000);

// ============================================
// –í–´–í–û–î–´
// ============================================

setTimeout(() => {
    console.log('\nüéØ –í–´–í–û–î–´:');
    console.log('‚úÖ Promise - —ç—Ç–æ "–æ–±–µ—â–∞–Ω–∏–µ" –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è: pending ‚Üí fulfilled/rejected');
    console.log('‚úÖ .then() –¥–ª—è —É—Å–ø–µ—Ö–∞, .catch() –¥–ª—è –æ—à–∏–±–æ–∫');
    console.log('‚úÖ async/await - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±');
    console.log('‚úÖ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π');
}, 5000);
