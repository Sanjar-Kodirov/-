// –î–µ–Ω—å 3: TypeScript Practice - 5 –∑–∞–¥–∞–Ω–∏–π –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É
console.log("=== –î–ï–ù–¨ 3: TYPESCRIPT PRACTICE ===");
// ============================================
// –ó–ê–î–ê–ù–ò–ï 1: –ë–∞–∑–æ–≤–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ (5 –º–∏–Ω—É—Ç)
// ============================================
console.log("\n--- –ó–∞–¥–∞–Ω–∏–µ 1: –ë–∞–∑–æ–≤–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è ---");
// –ó–ê–î–ê–ß–ê: –¢–∏–ø–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
// function add(a, b) {
//     return a + b;
// }
// –í–ê–®–ï –†–ï–®–ï–ù–ò–ï:
function add(a, b) {
  return a + b;
}
// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
console.log("add(5, 3):", add(5, 3)); // 8
console.log("add(10, -2):", add(10, -2)); // 8
// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞:
// console.log('add("5", "3"):', add("5", "3")); // TypeScript error!
// ============================================
// –ó–ê–î–ê–ù–ò–ï 2: Interface –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ (5 –º–∏–Ω—É—Ç)
// ============================================
console.log("\n--- –ó–∞–¥–∞–Ω–∏–µ 2: Interface ---");
// –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π—Ç–µ interface –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
var user = {
  id: 1,
  name: "John",
  email: "john@example.com",
  isActive: true,
};
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ interface:
var newUser = {
  // TODO: –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  id: 2,
  name: "Jane",
  email: "jane@example.com",
  isActive: false,
};
console.log("User:", newUser);
// ============================================
// –ó–ê–î–ê–ù–ò–ï 3: Union Types (5 –º–∏–Ω—É—Ç)
// ============================================
console.log("\n--- –ó–∞–¥–∞–Ω–∏–µ 3: Union Types ---");
// –ó–ê–î–ê–ß–ê: –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–∏—Å–ª–æ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö
function formatValue(value) {
  if (typeof value === "string") {
    return value.toUpperCase();
  } else {
    return value.toFixed(2);
  }
}
// –í–ê–®–ï –†–ï–®–ï–ù–ò–ï - –¥–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø—ã:
function formatValue(value) {
  // TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
  if (typeof value === "string") {
    return value.toUpperCase();
  } else {
    return value.toFixed(2);
  }
}
// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
// console.log('formatValue("hello"):', formatValue("hello")); // "HELLO"
// console.log('formatValue(3.14159):', formatValue(3.14159)); // "3.14"
// ============================================
// –ó–ê–î–ê–ù–ò–ï 4: Generic —Ñ—É–Ω–∫—Ü–∏—è (10 –º–∏–Ω—É—Ç)
// ============================================
console.log("\n--- –ó–∞–¥–∞–Ω–∏–µ 4: Generics ---");
// –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π—Ç–µ generic —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
// function getFirstElement(arr) {
//     return arr[0];
// }
// –í–ê–®–ï –†–ï–®–ï–ù–ò–ï - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Generic:
function getFirstElement(arr) {
  // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
  return arr[0];
}
// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
// const numbers = [1, 2, 3, 4, 5];
// const strings = ["hello", "world", "typescript"];
// const booleans = [true, false, true];
// console.log('First number:', getFirstElement(numbers)); // 1 (—Ç–∏–ø number)
// console.log('First string:', getFirstElement(strings)); // "hello" (—Ç–∏–ø string)
// console.log('First boolean:', getFirstElement(booleans)); // true (—Ç–∏–ø boolean)
// ============================================
// –ó–ê–î–ê–ù–ò–ï 5: –°–ª–æ–∂–Ω—ã–π —Ç–∏–ø –¥–ª—è API (5 –º–∏–Ω—É—Ç)
// ============================================
console.log("\n--- –ó–∞–¥–∞–Ω–∏–µ 5: –°–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã ---");
// –ó–ê–î–ê–ß–ê: –¢–∏–ø–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç API response
var apiResponse = {
  data: [
    { id: 1, title: "Post 1", author: { name: "John", age: 25 } },
    { id: 2, title: "Post 2", author: { name: "Jane", age: 30 } },
  ],
  meta: {
    total: 2,
    page: 1,
    hasMore: false,
  },
  status: "success",
};
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∏–ø—ã:
var typedResponse = {
  // TODO: —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
  data: [
    { id: 1, title: "Post 1", author: { name: "John", age: 25 } },
    { id: 2, title: "Post 2", author: { name: "Jane", age: 30 } },
  ],
  meta: {
    total: 2,
    page: 1,
    hasMore: false,
  },
  status: "success",
};
console.log("Typed API Response:", typedResponse);
// ============================================
// –ë–û–ù–£–°–ù–û–ï –ó–ê–î–ê–ù–ò–ï: –¢–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
// ============================================
console.log("\n--- –ë–æ–Ω—É—Å: –¢–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π ---");
// –ó–ê–î–ê–ß–ê: –¢–∏–ø–∏–∑–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// function processUsers(users, callback) {
//     return users.map(callback);
// }
// –í–ê–®–ï –†–ï–®–ï–ù–ò–ï:
function processUsers(users, callback) {
  return users.map(callback);
}
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
var users = [
  { name: "Alice", age: 25 },
  { name: "Bob", age: 30 },
];
var userNames = processUsers(users, function (user) {
  return user.name;
});
var userAges = processUsers(users, function (user) {
  return user.age;
});
console.log("User names:", userNames); // ["Alice", "Bob"]
console.log("User ages:", userAges); // [25, 30]
// ============================================
// –ü–†–û–í–ï–†–ö–ê –ü–û–ù–ò–ú–ê–ù–ò–Ø
// ============================================
console.log("\nüéØ –í–û–ü–†–û–°–´ –î–õ–Ø –°–ê–ú–û–ü–†–û–í–ï–†–ö–ò:");
console.log("1. –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É interface –∏ type?");
console.log("2. –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Union types?");
console.log("3. –ó–∞—á–µ–º –Ω—É–∂–Ω—ã Generics?");
console.log("4. –ö–∞–∫ TypeScript –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫?");
// ============================================
// –í–´–í–û–î–´
// ============================================
console.log("\nüöÄ –í–´–í–û–î–´:");
console.log("‚úÖ TypeScript –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é –≤ JavaScript");
console.log("‚úÖ Interface –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤");
console.log("‚úÖ Union types –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤");
console.log("‚úÖ Generics –¥–µ–ª–∞—é—Ç –∫–æ–¥ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º");
console.log("‚úÖ –¢–∏–ø—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏");
console.log("\nüéØ –ì–æ—Ç–æ–≤—ã –∫ –ë–ª–æ–∫—É 3: –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ TypeScript!");
