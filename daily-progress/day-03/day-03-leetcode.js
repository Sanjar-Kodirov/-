// –î–µ–Ω—å 3: LeetCode Practice - Valid Parentheses
console.log("=== –î–ï–ù–¨ 3: VALID PARENTHESES ===");

// ============================================
// –ó–ê–î–ê–ß–ê: Valid Parentheses
// ============================================

/*
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ s —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã '(', ')', '{', '}', '[' –∏ ']'.
–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π.

–í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –µ—Å–ª–∏:
1. –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å–∫–æ–±–∫–∞–º–∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
2. –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
3. –ö–∞–∂–¥–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—Ç–∫—Ä—ã—Ç—É—é —Å–∫–æ–±–∫—É —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞

–ü—Ä–∏–º–µ—Ä—ã:
Input: s = "()"     Output: true
Input: s = "()[]{}" Output: true  
Input: s = "(]"     Output: false
Input: s = "([)]"   Output: false
Input: s = "{[]}"   Output: true
*/

// ============================================
// –®–ê–ì 1: –ü–û–ù–ò–ú–ê–ù–ò–ï –ó–ê–î–ê–ß–ò (5 –º–∏–Ω—É—Ç)
// ============================================

console.log("\n--- –®–∞–≥ 1: –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---");

// –í–û–ü–†–û–° 1: –û–±—ä—è—Å–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
console.log("–ó–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫");

// –í–û–ü–†–û–° 2: –ö–∞–∫–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?
console.log("–í—Ö–æ–¥: —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–∫–æ–±–∫–∞–º–∏");

// –í–û–ü–†–û–° 3: –ß—Ç–æ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ñ—É–Ω–∫—Ü–∏—è?
console.log("–í—ã—Ö–æ–¥: true/false");

// –í–û–ü–†–û–° 4: –ö–∞–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥—É–º–∞—Ç—å?
const testCases = [
  "()", // true
  "()[]{}", // true
  "(]", // false
  "([)]", // false
  "{[]}", // true
  "", // true (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
  "(((", // false
  ")))", // false
];

console.log("–¢–µ—Å—Ç –∫–µ–π—Å—ã:", testCases);

// ============================================
// –®–ê–ì 2: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï (5 –º–∏–Ω—É—Ç)
// ============================================

console.log("\n--- –®–∞–≥ 2: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---");

// –í–û–ü–†–û–° 1: –ö–∞–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
console.log("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: Stack (—Å—Ç–µ–∫)");

// –í–û–ü–†–û–° 2: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Å–µ–≤–¥–æ–∫–æ–¥
console.log(`
–ü—Å–µ–≤–¥–æ–∫–æ–¥:
1. –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç–µ–∫
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ:
   - –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ ‚Üí –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–µ–∫
   - –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≤–µ—Ä—Ö–æ–º —Å—Ç–µ–∫–∞
3. –í –∫–æ–Ω—Ü–µ —Å—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
`);

// –í–û–ü–†–û–° 3: –ö–∞–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å?
console.log("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n)");
console.log("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n)");

// ============================================
// –®–ê–ì 3: –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (15 –º–∏–Ω—É—Ç)
// ============================================

console.log("\n--- –®–∞–≥ 3: –í–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ---");

// –ó–ê–î–ê–ù–ò–ï: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é isValid —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!
// –ù–ï –°–ú–û–¢–†–ò–¢–ï –ù–ê –†–ï–®–ï–ù–ò–ï –ù–ò–ñ–ï!

function isValid(s) {
  // TODO: –í–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–µ—Å—å
  // –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –∫–∞–∫ —Å—Ç–µ–∫
  // stack.push() - –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
  // stack.pop() - —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç

  // –í–∞—à –∫–æ–¥:

  const stack = [];
  const pairs = {
    ")": "(",
    "}": "{",
    "]": "[",
  };

  for (let char of s) {
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    if (char === "(" || char === "{" || char === "[") {
      stack.push(char);
    }
    // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    else if (char === ")" || char === "}" || char === "]") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      if (stack.length === 0 || stack.pop() !== pairs[char]) {
        return false;
      }
    }
  }

  // –°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
  return stack.length === 0;
}

// ============================================
// –®–ê–ì 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï (5 –º–∏–Ω—É—Ç)
// ============================================

console.log("\n--- –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---");

// –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é:
function testIsValid() {
  const tests = [
    { input: "()", expected: true },
    { input: "()[]{}", expected: true },
    { input: "(]", expected: false },
    { input: "([)]", expected: false },
    { input: "{[]}", expected: true },
    { input: "", expected: true },
    { input: "((", expected: false },
    { input: "))", expected: false },
  ];

  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...");

  tests.forEach((test, index) => {
    const result = isValid(test.input);
    const passed = result === test.expected;

    console.log(`–¢–µ—Å—Ç ${index + 1}: "${test.input}"`);
    console.log(`  –û–∂–∏–¥–∞–µ—Ç—Å—è: ${test.expected}`);
    console.log(`  –ü–æ–ª—É—á–µ–Ω–æ: ${result}`);
    console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed ? "‚úÖ –ü–†–û–®–ï–õ" : "‚ùå –ù–ï –ü–†–û–®–ï–õ"}`);
    console.log("");
  });
}

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:
testIsValid();

// ============================================
// –†–ï–®–ï–ù–ò–ï (–°–ú–û–¢–†–ò–¢–ï –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –°–í–û–ï–ô –ü–û–ü–´–¢–ö–ò!)
// ============================================

console.log("\n--- –†–µ—à–µ–Ω–∏–µ (—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏!) ---");

function isValidSolution(s) {
  const stack = [];
  const pairs = {
    ")": "(",
    "}": "{",
    "]": "[",
  };

  for (let char of s) {
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    if (char === "(" || char === "{" || char === "[") {
      stack.push(char);
    }
    // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    else if (char === ")" || char === "}" || char === "]") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      if (stack.length === 0 || stack.pop() !== pairs[char]) {
        return false;
      }
    }
  }

  // –°—Ç–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
  return stack.length === 0;
}

// ============================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–´–ó–û–í–´
// ============================================

console.log("\n--- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã ---");

// –í—ã–∑–æ–≤ 1: –ß—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã?
function isValidExtended(s) {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–∫–æ–±–∫–∏
  const filtered = s.replace(/[^(){}[\]]/g, "");
  return isValidSolution(filtered);
}

console.log("–¢–µ—Å—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏:");
console.log('isValidExtended("a(b)c"): ', isValidExtended("a(b)c")); // true

// –í—ã–∑–æ–≤ 2: –ü–æ–¥—Å—á–µ—Ç –≥–ª—É–±–∏–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
function maxDepth(s) {
  let depth = 0;
  let maxDepth = 0;

  for (let char of s) {
    if (char === "(") {
      depth++;
      maxDepth = Math.max(maxDepth, depth);
    } else if (char === ")") {
      depth--;
    }
  }

  return maxDepth;
}

console.log('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ "((()))":', maxDepth("((()))")); // 3

// ============================================
// –í–´–í–û–î–´
// ============================================

console.log("\nüéØ –í–´–í–û–î–´:");
console.log("‚úÖ Stack –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π");
console.log("‚úÖ LIFO (Last In, First Out) –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å—Ç–µ–∫–∞");
console.log("‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(n) - –ø—Ä–æ—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –æ–¥–∏–Ω —Ä–∞–∑");
console.log(
  "‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(n) - –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç–µ–∫–µ"
);

console.log("\nüöÄ –ì–æ—Ç–æ–≤—ã –∫ –ë–ª–æ–∫—É 2: TypeScript Practice!");
