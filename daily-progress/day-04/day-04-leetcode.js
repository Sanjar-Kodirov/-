// –î–µ–Ω—å 4: LeetCode Practice - Reverse Linked List
console.log('=== –î–ï–ù–¨ 4: REVERSE LINKED LIST ===');

// ============================================
// –ó–ê–î–ê–ß–ê: Reverse Linked List
// ============================================

/*
–î–∞–Ω head —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –≤–µ—Ä–Ω–∏—Ç–µ –Ω–æ–≤—ã–π head.

–ü—Ä–∏–º–µ—Ä 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

–ü—Ä–∏–º–µ—Ä 2:
Input: head = [1,2]
Output: [2,1]

–ü—Ä–∏–º–µ—Ä 3:
Input: head = []
Output: []

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç 0 –¥–æ 5000
- -5000 <= Node.val <= 5000
*/

// ============================================
// –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï LINKED LIST
// ============================================

class ListNode {
    constructor(val, next) {
        this.val = (val === undefined ? 0 : val);
        this.next = (next === undefined ? null : next);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function createLinkedList(arr) {
    if (arr.length === 0) return null;
    
    const head = new ListNode(arr[0]);
    let current = head;
    
    for (let i = 1; i < arr.length; i++) {
        current.next = new ListNode(arr[i]);
        current = current.next;
    }
    
    return head;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ –º–∞—Å—Å–∏–≤
function linkedListToArray(head) {
    const result = [];
    let current = head;
    
    while (current !== null) {
        result.push(current.val);
        current = current.next;
    }
    
    return result;
}

// ============================================
// –®–ê–ì 1: –ü–û–ù–ò–ú–ê–ù–ò–ï –ó–ê–î–ê–ß–ò (5 –º–∏–Ω—É—Ç)
// ============================================

console.log('\n--- –®–∞–≥ 1: –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ [1,2,3,4,5]
const testList = createLinkedList([1, 2, 3, 4, 5]);
console.log('–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫:', linkedListToArray(testList));
console.log('–ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å: [5,4,3,2,1]');

// –í–û–ü–†–û–°–´ –î–õ–Ø –ü–û–ù–ò–ú–ê–ù–ò–Ø:
console.log('\n–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è:');
console.log('1. –ß—Ç–æ —Ç–∞–∫–æ–µ Linked List?');
console.log('2. –ö–∞–∫ —Å–≤—è–∑–∞–Ω—ã —É–∑–ª—ã –º–µ–∂–¥—É —Å–æ–±–æ–π?');
console.log('3. –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å" —Å–ø–∏—Å–æ–∫?');
console.log('4. –ö–∞–∫–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?');

// ============================================
// –®–ê–ì 2: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï (5 –º–∏–Ω—É—Ç)
// ============================================

console.log('\n--- –®–∞–≥ 2: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---');

console.log('–ü–æ–¥—Ö–æ–¥—ã –∫ —Ä–µ—à–µ–Ω–∏—é:');
console.log('1. –ò–¢–ï–†–ê–¢–ò–í–ù–´–ô –ø–æ–¥—Ö–æ–¥:');
console.log('   - –ò–¥–µ–º –ø–æ —Å–ø–∏—Å–∫—É');
console.log('   - –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ–∫');
console.log('   - –ò—Å–ø–æ–ª—å–∑—É–µ–º 3 —É–∫–∞–∑–∞—Ç–µ–ª—è: prev, current, next');

console.log('2. –†–ï–ö–£–†–°–ò–í–ù–´–ô –ø–æ–¥—Ö–æ–¥:');
console.log('   - –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ—Ö–æ–¥–∏–º –¥–æ –∫–æ–Ω—Ü–∞');
console.log('   - –ù–∞ –æ–±—Ä–∞—Ç–Ω–æ–º –ø—É—Ç–∏ –º–µ–Ω—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏');

console.log('\n–í—ã–±–µ—Ä–µ–º –ò–¢–ï–†–ê–¢–ò–í–ù–´–ô - –ø—Ä–æ—â–µ –ø–æ–Ω—è—Ç—å');

// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:
console.log('\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:');
console.log('–ò—Å—Ö–æ–¥–Ω–æ: 1 -> 2 -> 3 -> 4 -> 5 -> null');
console.log('–®–∞–≥ 1:   null <- 1    2 -> 3 -> 4 -> 5 -> null');
console.log('–®–∞–≥ 2:   null <- 1 <- 2    3 -> 4 -> 5 -> null');
console.log('–®–∞–≥ 3:   null <- 1 <- 2 <- 3    4 -> 5 -> null');
console.log('–®–∞–≥ 4:   null <- 1 <- 2 <- 3 <- 4    5 -> null');
console.log('–®–∞–≥ 5:   null <- 1 <- 2 <- 3 <- 4 <- 5');

// ============================================
// –®–ê–ì 3: –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (15 –º–∏–Ω—É—Ç)
// ============================================

console.log('\n--- –®–∞–≥ 3: –í–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ---');

// –ó–ê–î–ê–ù–ò–ï: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é reverseList —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!
function reverseList(head) {
    // TODO: –í–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–µ—Å—å
    // –ü–æ–¥—Å–∫–∞–∑–∫–∏:
    // 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3 —É–∫–∞–∑–∞—Ç–µ–ª—è: prev, current, next
    // 2. prev –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å null
    // 3. current –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å head
    // 4. –í —Ü–∏–∫–ª–µ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ next, –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–µ–ª–∫—É, —Å–¥–≤–∏–Ω—å—Ç–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏
    
    // –í–∞—à –∫–æ–¥:
    
}

// ============================================
// –®–ê–ì 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï (5 –º–∏–Ω—É—Ç)
// ============================================

console.log('\n--- –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---');

function testReverseList() {
    const tests = [
        { input: [1, 2, 3, 4, 5], expected: [5, 4, 3, 2, 1] },
        { input: [1, 2], expected: [2, 1] },
        { input: [], expected: [] },
        { input: [1], expected: [1] },
        { input: [1, 2, 3], expected: [3, 2, 1] }
    ];
    
    console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
    
    tests.forEach((test, index) => {
        const inputList = createLinkedList(test.input);
        const resultList = reverseList(inputList);
        const result = linkedListToArray(resultList);
        const passed = JSON.stringify(result) === JSON.stringify(test.expected);
        
        console.log(`\n–¢–µ—Å—Ç ${index + 1}: [${test.input.join(',')}]`);
        console.log(`  –û–∂–∏–¥–∞–µ—Ç—Å—è: [${test.expected.join(',')}]`);
        console.log(`  –ü–æ–ª—É—á–µ–Ω–æ: [${result.join(',')}]`);
        console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ù–ï –ü–†–û–®–ï–õ'}`);
    });
}

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:
// testReverseList();

// ============================================
// –†–ï–®–ï–ù–ò–ï (–°–ú–û–¢–†–ò–¢–ï –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –°–í–û–ï–ô –ü–û–ü–´–¢–ö–ò!)
// ============================================

console.log('\n--- –†–µ—à–µ–Ω–∏–µ (—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏!) ---');

function reverseListSolution(head) {
    let prev = null;
    let current = head;
    
    while (current !== null) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª
        const next = current.next;
        
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É
        current.next = prev;
        
        // –°–¥–≤–∏–≥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏
        prev = current;
        current = next;
    }
    
    // prev —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π head
    return prev;
}

// ============================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–´–ó–û–í–´
// ============================================

console.log('\n--- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã ---');

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
function reverseListRecursive(head) {
    // –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    if (head === null || head.next === null) {
        return head;
    }
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å
    const newHead = reverseListRecursive(head.next);
    
    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–≤—è–∑—å
    head.next.next = head;
    head.next = null;
    
    return newHead;
}

console.log('–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ!');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ã (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
function hasCycle(head) {
    let slow = head;
    let fast = head;
    
    while (fast !== null && fast.next !== null) {
        slow = slow.next;
        fast = fast.next.next;
        
        if (slow === fast) {
            return true;
        }
    }
    
    return false;
}

console.log('–ë–æ–Ω—É—Å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–∏–∫–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ');

// ============================================
// –í–´–í–û–î–´
// ============================================

console.log('\nüéØ –í–´–í–û–î–´:');
console.log('‚úÖ Linked List - –≤–∞–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
console.log('‚úÖ –£–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
console.log('‚úÖ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–∞—Å—Ç–æ –ø—Ä–æ—â–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ');
console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(n), –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è O(1)');
console.log('‚úÖ –í–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏');

console.log('\nüöÄ –ì–æ—Ç–æ–≤—ã –∫ –ë–ª–æ–∫—É 2: React Foundations!');
